//====================================================================================//
//                                                                                    //
//                         Reachable State Space Structure                            //
//                                                                                    //
//====================================================================================//
//  This File:   rss.h                      Language: C++  (xlC and CC)               //
//  Software:    PEPS 2002                   Advisor: Brigitte.Plateau@imag.fr        //
//  Error Codes: 2200                                                                 //
//====================================================================================//
//  Creation:    19/dec/95                        by: Paulo.Fernandes@imag.fr         //
//  Last Change: 21/oct/02                        by: paulof@inf.pucrs.br             //
//====================================================================================//
//     This class is used to store the PEPS main structure "reachable state space".   //
// The static variable 'RSS::rss' contains the current SAN reachable state space.     //
//                                                                                    //
//     This structure is usually generated by a reachability function. This function  //
// depends on a subset of the automata of the SAN. The "f_parameters" (an automata    //
// subset object) stores this information.                                            //
//                                                                                    //
//     The main information of this structure is composed of two large arrays of      //
// booleans (objects of the class 'bools'). The first array ('reachable') indicates   //
// with 'true' only the reachable states. The second array ('remain') indicates with  //
// 'false' the eliminated states. Remember that in the process of grouping the state  //
// space of a group can be reduced, thus inducing a reduction of the SAN model state  //
// space. Let us call "original states" the global states correspondig to the SAN     //
// before grouping (non-reduced). The arrays 'reachable' and 'remain' are indexed for //
// all original states.                                                               //
//                                                                                    //
// Restriction: Only non-reachable states can be marked as eliminated states.         //
//====================================================================================//

class RSS
{
public:
 inline RSS();                                               // Empty Constructor
 inline RSS(const int dim);                                  // Sized Constructor
 inline RSS(const RSS & v);                                   // Copy Constructor
 inline ~RSS();                                                     // Destructor

 inline void create();                                    // Empty Initialization
 inline void create(const int dim);                       // Sized Initialization
 inline void create(const aut_st & s);                    // Sized Initialization
 inline void copy(const RSS & v);                // Copy and Sized Initialization
 inline void erase();                                              // Destruction

 inline void baptise(const peps_name file);             // It assigns a file name
 inline void name(peps_name file) const;              // It returns the file name
 inline bool is_empty() const;                   // There are no remaining states
 inline int  size() const;                      // The number of remaining states
 inline int  orig_size() const;                  // The number of original states
 inline int  reach_size() const;                // The number of reachable states
 inline bool has(const int s) const;       // The original state 's' is reachable
 inline bool remains(const int s) const;
                                     // The original state 's' was not eliminated

        //--------------------------------------------------------------------------//
        //                          Coordinates Conversion                          //
        //--------------------------------------------------------------------------//
        //   These routines converts a coordinate according to the a state space to //
        // another. Three state spaces are considered:                              //
        //       - orig       : the original product state space                    //
        //       - rem        : the remaining (after grouping) product state space  //
        //       - reach      : the reachable state space                           //
        //--------------------------------------------------------------------------//
  int orig2rem(const int s) const;          // converts 's' from original to remaining
  int orig2reach(const int s) const;        // converts 's' from original to reachable
  int rem2orig(const int s) const;          // converts 's' from remaining to original
  int rem2reach(const int s) const;         // converts 's' from remaining to reachable
  int reach2orig(const int s) const;        // converts 's' from reachable to original
  int reach2rem(const int s) const;         // converts 's' from reachable to remaining

        //--------------------------------------------------------------------------//
        //                            Reduction of states                           //
        //--------------------------------------------------------------------------//
        //  The next two functions reduce the reachable state space 'this'. In both //
        // cases a logical reduction is performed. The eliminated states are marked //
        // with 'false' in the array 'remain'.                                      //
        //                                                                          //
        //  Restriction: these functions should NEVER eliminate reachable states.   // 
        //--------------------------------------------------------------------------//
 inline void reduce(const bools & v);                       // It copies 'v' to 'remain'
        void reduce(const aut_st & v, const aut_set & s);
                          // It eliminates all global states such that the automata in
                           // the subset 's' are defined by the internal states in 'v'

        //--------------------------------------------------------------------------//
        //                   Creation of a reachable state space                    //
        //--------------------------------------------------------------------------//
        //   The next two functions fill 'this' with a reachable state space. In    //
        // both cases the vector 'remain' is filled with 'true' values.             //
        //--------------------------------------------------------------------------//
        void generate();                 // It marks all states of 'this' as reachable
        void generate(const func_tree & f, const aut_st & s);
                    // It marks all states with nonzero evaluation of 'f' as reachable
                    // ('s' contains the size of each automaton - the function domain)

        //--------------------------------------------------------------------------//
        //                    Change of a reachable state space                     //
        //--------------------------------------------------------------------------//
        //   The next function fills 'this' with a reachable state space putting as //
        // reachable only the states where the probability vector VCT::vct has      //
	// nonzero values.                                                          //
        //--------------------------------------------------------------------------//
        void change_according_to_VCT();
        //--------------------------------------------------------------------------//
        //   The next function fills 'this' with a reachable state space putting as //
        // reachable the elements of a boolean vector (bools class object).         //
        //--------------------------------------------------------------------------//
        void put(const bools v);

        void dump_vector(ofstream & fout) const;// Dump the vector on 'fout' file stream
        void write() const;                              // Output on 'fout' file stream
        void read(const peps_name file);                 // Input from 'fin' file stream
        void print() const;                // Print a readable version in 'rss.dbg' file
        int  mem_use() const;                  // Memory space used by 'this' (in bytes)

        //--------------------------------------------------------------------------//
        //                Parameters of the reachability function                   //
        //--------------------------------------------------------------------------//
        //   The next two functions provide an access to the subset of the automata //
        // that are parameters to the reachability function.                        //
        //--------------------------------------------------------------------------//
 inline void put_dep(const aut_set & s);         // It fills the variable 'f_parameters'
 inline void get_dep(aut_set & s) const;       // It returns the variable 'f_parameters'

        //--------------------------------------------------------------------------//
        //                          Static variable                                 //
        //--------------------------------------------------------------------------//
        static  RSS rss;

        //--------------------------------------------------------------------------//
        //                          Data Structures                                 //
        //--------------------------------------------------------------------------//
private: peps_name file_name;     // the file name of this structure
         aut_set   f_parameters;  // the parameters of the reachability function
         int       originals;     // the number of original states (before reduction)
         int       dimension;     // the number of remaining states (after reduction)
         int       reachable;     // the number of reachable states
         bools     remain;        // the remaining states
         bools     states;        // the reachable states
};
